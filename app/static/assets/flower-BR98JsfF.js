import{z as a,x as s}from"./index-CrBMAzv8.js";const i={getMultiple(e){var r;const t=e?{...e,species_ids:(r=e.species_ids)==null?void 0:r.join(",")}:void 0;return a.get("/api/data/flower",{params:t,paramsSerializer:{indexes:null}})},get(e){return a.get(`/api/data/flower/${e}`)},create(e){return a.post("/api/data/flower",e)},update(e,t){return a.put(`/api/data/flower/${e}`,t)},delete(e){return a.delete(`/api/data/flower/${e}`)}},n=s("flower",{state:()=>({items:[],pagination:{page:1,limit:10,total:0,pages:0},loading:!1,error:null}),actions:{async fetchItems(e){this.loading=!0;try{const t=await i.getMultiple({...e,page:this.pagination.page,limit:this.pagination.limit});this.items=t.data.data,this.pagination={page:t.data.pagination.page,limit:t.data.pagination.per_page,total:t.data.pagination.total,pages:t.data.pagination.pages},this.error=null}catch(t){this.error=t.message}finally{this.loading=!1}},async createItem(e){try{return(await i.create(e)).data.flower_id}catch(t){throw new Error(t.message)}},async updateItem(e,t){try{await i.update(e,t)}catch(r){throw new Error(r.message)}},async deleteItem(e){try{await i.delete(e)}catch(t){throw new Error(t.message)}}}});export{n as u};
