import{z as e,x as s}from"./index-CrBMAzv8.js";const r={getMultiple(t){var i;const a=t?{...t,species_ids:(i=t.species_ids)==null?void 0:i.join(",")}:void 0;return e.get("/api/data/petal",{params:a,paramsSerializer:{indexes:null}})},get(t){return e.get(`/api/data/petal/${t}`)},create(t){return e.post("/api/data/petal",t)},update(t,a){return e.put(`/api/data/petal/${t}`,a)},delete(t){return e.delete(`/api/data/petal/${t}`)}},p=s("petal",{state:()=>({items:[],pagination:{page:1,limit:10,total:0,pages:0},loading:!1,error:null}),actions:{async fetchItems(t){this.loading=!0;try{const a=await r.getMultiple({...t,page:this.pagination.page,limit:this.pagination.limit});this.items=a.data.data,this.pagination={page:a.data.pagination.page,limit:a.data.pagination.per_page,total:a.data.pagination.total,pages:a.data.pagination.pages},this.error=null}catch(a){this.error=a.message}finally{this.loading=!1}},async createItem(t){try{return(await r.create(t)).data.petal_id}catch(a){throw new Error(a.message)}},async updateItem(t,a){try{await r.update(t,a)}catch(i){throw new Error(i.message)}},async deleteItem(t){try{await r.delete(t)}catch(a){throw new Error(a.message)}}}});export{p as u};
